# Prerequisites #

 - For just building, GCC and GNU make are required.
 - For testing and development, Python2.6 and Premake4 are required.

# Build Instructions #

Run: make <optional config> <optional target>

  The configuration can be:

    config=debug
     - Assertions enabled and optimizations disabled (this is the default)

    config=relase
     - Assertions disabled and optimizations enabled

  The target can be:

    static_lib
     - Static library, found at: build/libcirca.a
       Debug filename ends with _d, as in: libcirca_d.a
       On Windows the suffix is .lib, as in: circa.lib

    command_line
     - Command-line tool with REPL. Found at: build/circa
       Debug filename ends with _d, as in: circa_d
       On Windows the suffix is .exe, as in: circa.exe

    unit_tests
     - App that runs C++-based unit tests. Creates: build/unit_tests

Example commands:

  make static_lib config=release 
   - Build static library in release mode

# Testing #

  0. Build everything with 'debug' config.
  1. Run build/circa_d and verify the help text is shown
  2. Run tools/ca-tests.py
  3. Run build/unit_tests

# Advanced building #

This section has more detail on the build process, if you plan on hacking on the
code or doing alternative builds.

  Prebuild
    The python script at tools/ca-prebuild.py serves to create some generated C++
    files located at src/generated. The resulting files are checked in to source
    control, so the project can be built without running this script.

    This script needs to be rerun whenever a cpp file is added or removed from
    /src/functions or /src/types. It also needs to be run when /src/ca/stdlib.ca
    is changed.

  Makefiles
    The makefiles are generated using premake4. More info on this tool at:
        http://industriousone.com/premake

    The resulting generated makefiles are checked in to source control, so
    that users can build without needing premake4.

    Makefiles need to be regenerated whenever a cpp file is added or removed from /src
    To regenerate the makefiles, run "premake4 gmake".

    Premake4 is pretty awesome and supports lots of project types (like visual
    studio or Xcode projects), if you are interested in something other than makefiles.
